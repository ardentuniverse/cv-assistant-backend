main.py```

Paste this:

```python
from flask import Flask, request, jsonify
from flask_cors import CORS
from sentence_transformers import SentenceTransformer
from werkzeug.utils import secure_filename
import os
import docx
import fitz  # PyMuPDF
import numpy as np

app = Flask(__name__)
CORS(app)

model = SentenceTransformer('all-MiniLM-L6-v2')

def extract_text(file):
    filename = secure_filename(file.filename)
    ext = os.path.splitext(filename)[-1].lower()

    if ext == '.pdf':
        text = ""
        with fitz.open(stream=file.read(), filetype="pdf") as doc:
            for page in doc:
                text += page.get_text()
        return text
    elif ext == '.docx':
        doc = docx.Document(file)
        return '\n'.join([p.text for p in doc.paragraphs])
    else:
        return ""

def score_text(resume_text, job_desc):
    resume_embed = model.encode([resume_text])[0]
    job_embed = model.encode([job_desc])[0]
    similarity = float(resume_embed @ job_embed / (np.linalg.norm(resume_embed) * np.linalg.norm(job_embed)))
    return {
        "score": round(similarity * 100, 2),
        "semantic_score": round(similarity, 3),
        "keyword_match": "Basic semantic match applied",
        "suggestions": [
            "Use more keywords from the job description",
            "Quantify your achievements",
            "Match your summary to job title"
        ]
    }

@app.route("/analyze", methods=["POST"])
def analyze():
    if "resume" not in request.files or "job_desc" not in request.form:
        return jsonify({"error": "Missing data"}), 400
    file = request.files["resume"]
    job_desc = request.form["job_desc"]
    resume_text = extract_text(file)
    result = score_text(resume_text, job_desc)
    return jsonify(result)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
